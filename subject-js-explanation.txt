# Complete Data Flow Analysis - Variable Changes Step by Step:




## Initial State (Page Load)

let totalSubjects = 0;           // Not set yet
let currentSubjectIndex = 0;     // Starting index
let subjects = [];               // Empty array
```

**DOM Elements State:**:

- Subject count input: Empty
- Subject inputs container: Empty
- Check result button: Hidden
- Error boxes: Hidden

---

## Phase 1: User Enters Subject Count

### Step 1: User types "3" in subject count input
**Variables remain unchanged:**


totalSubjects = 0;
currentSubjectIndex = 0;
subjects = [];

**DOM State:**


- Input field value: "3"
- No other changes yet

### Step 2: User clicks "Generate Subjects" button
**Function called:** `generateSubjectInputs()`

#### Inside generateSubjectInputs():

**Line 1:** `const subjectCountValue = document.getElementById('subject-count').value;`
- **Local variable created:** `subjectCountValue = "3"` (string)

**Line 2-4:** Get DOM references


const subjectInputsContainer = // Reference to DOM element
const checkResultBtn = // Reference to DOM element  
const errorBox = // Reference to DOM element




**Line 5-7:** Reset UI


errorBox.style.display = 'none';        // Hide errors
subjectInputsContainer.innerHTML = '';   // Clear container
checkResultBtn.style.display = 'none';  // Hide result button
```

**Line 8:** `const subjectCount = Number(subjectCountValue);`
- **Local variable:** `subjectCount = 3` (number)

**Line 9-18:** Validation (passes since 3 is valid)

**Line 19-21:** **GLOBAL VARIABLES UPDATE:**
```javascript
totalSubjects = 3;              // ✅ CHANGED: 0 → 3
currentSubjectIndex = 0;        // ✅ REMAINS: 0
subjects = [                    // ✅ CHANGED: [] → array with 3 objects
  { name: '', total: '', obtained: '' },
  { name: '', total: '', obtained: '' },
  { name: '', total: '', obtained: '' }
];
```

**Line 22:** `showSubjectForm(currentSubjectIndex);`
- **Function called:** `showSubjectForm(0)`

---

## Phase 2: First Subject Form Display

### Inside showSubjectForm(0):

**Line 1:** `const subjectInputsContainer = document.getElementById('subject-inputs');`
- Gets DOM reference

**Line 2:** `subjectInputsContainer.innerHTML = '';`
- Clears container (already empty)

**Line 3:** `const data = subjects[index] || { name: '', total: '', obtained: '' };`
- **Local variable:** `data = subjects[0]` = `{ name: '', total: '', obtained: '' }`

**Line 4:** `const isLast = index === totalSubjects - 1;`
- **Local variable:** `isLast = (0 === 3-1)` = `false`

**Line 5-8:** Creates form HTML with:
- Subject name input: `value=""` (empty)
- Total marks input: `value=""` (empty)  
- Obtained marks input: `value=""` (empty)
- Back button: Not shown (index = 0)
- Submit button: "Submit Subject 1" (not last subject)

**DOM State After Phase 2:**
- Form displayed for Subject 1
- All inputs empty
- Only "Submit Subject 1" button visible




**Global Variables State:**

totalSubjects = 3;
currentSubjectIndex = 0;        // Still pointing to first subject
subjects = [
  { name: '', total: '', obtained: '' },  // ← Currently editing this
  { name: '', total: '', obtained: '' },
  { name: '', total: '', obtained: '' }
];
```

---

## Phase 3: User Enters First Subject Data

### Step 1: User types data
- Name: "Mathematics"
- Total: "100" 
- Obtained: "85"

**Variables unchanged:**

totalSubjects = 3;
currentSubjectIndex = 0;
subjects = [
  { name: '', total: '', obtained: '' },  // Still empty in memory
  { name: '', total: '', obtained: '' },
  { name: '', total: '', obtained: '' }
];
```

**DOM State:**
- Input fields now contain user data
- Data exists only in DOM, not in JavaScript variables yet

### Step 2: User clicks "Submit Subject 1"
**Function called:** `submitCurrentSubject()`

#### Inside submitCurrentSubject():

**Line 1:** `const subjectData = validateAndCollectInput();`

##### Inside validateAndCollectInput():
**Line 1-3:** Get input values

const name = "Mathematics";      // From DOM
const totalRaw = "100";         // From DOM  
const obtainedRaw = "85";       // From DOM
```

**Line 4-5:** Validation regex setup
**Line 6:** `let isValid = true;`

**Validation process:** All checks pass

**Line 7:** Duplicate check loop
```javascript
for (let i = 0; i < subjects.length; i++) {  // i goes 0,1,2
    if (i !== currentSubjectIndex && subjects[i].name && subjects[i].name.toLowerCase() === nameLower) {
        // i=0: skip (current index)
        // i=1: subjects[1].name = '' (empty, no match)
        // i=2: subjects[2].name = '' (empty, no match)
    }
}
```

**Return:** `{ name: "Mathematics", total: "100", obtained: "85" }`

#### Back in submitCurrentSubject():
**Line 2:** `if (!subjectData) return;` - Continues (data is valid)

**Line 3:** `subjects[currentSubjectIndex] = subjectData;`
- **GLOBAL VARIABLE UPDATE:**

subjects = [
  { name: 'Mathematics', total: '100', obtained: '85' },  // ✅ UPDATED
  { name: '', total: '', obtained: '' },
  { name: '', total: '', obtained: '' }
];
```

**Line 4:** `currentSubjectIndex++;`
- **GLOBAL VARIABLE UPDATE:**

currentSubjectIndex = 1;  // ✅ CHANGED: 0 → 1
```



**Line 5-6:** Check if more subjects

if (currentSubjectIndex < totalSubjects) {  // 1 < 3 = true
    showSubjectForm(currentSubjectIndex);   // Call showSubjectForm(1)
}
```

---

## Phase 4: Second Subject Form Display

### Inside showSubjectForm(1):

**Line 3:** `const data = subjects[1] || { name: '', total: '', obtained: '' };`
- **Local variable:** `data = subjects[1]` = `{ name: '', total: '', obtained: '' }`

**Line 4:** `const isLast = 1 === (3-1);` = `false`

**Form HTML generated with:**
- Subject name: `value=""` (empty)
- Total marks: `value=""` (empty)
- Obtained marks: `value=""` (empty)
- Back button: **NOW VISIBLE** (index > 0)
- Submit button: "Submit Subject 2"

**Global Variables State:**

totalSubjects = 3;
currentSubjectIndex = 1;        // ✅ Pointing to second subject
subjects = [
  { name: 'Mathematics', total: '100', obtained: '85' },  // Saved
  { name: '', total: '', obtained: '' },                  // ← Currently editing
  { name: '', total: '', obtained: '' }
];
```

---

## Phase 5: User Enters Second Subject and Goes Back

### Step 1: User enters second subject data
- Name: "Physics"
- Total: "80"
- Obtained: "70"

### Step 2: User clicks "Back" button
**Function called:** `goBackSubject()`

#### Inside goBackSubject():
**Line 1:** `if (currentSubjectIndex > 0) {` - True (1 > 0)

**Line 2:** `currentSubjectIndex--;`
- **GLOBAL VARIABLE UPDATE:**
```javascript
currentSubjectIndex = 0;  // ✅ CHANGED: 1 → 0
```

**Line 3:** `showSubjectForm(currentSubjectIndex);` - Calls `showSubjectForm(0)`

#### Inside showSubjectForm(0):
**Line 3:** `const data = subjects[0] || { name: '', total: '', obtained: '' };`
- **Local variable:** `data = subjects[0]` = `{ name: 'Mathematics', total: '100', obtained: '85' }`

**Form HTML generated with:**
- Subject name: `value="Mathematics"` ✅ **PRE-FILLED**
- Total marks: `value="100"` ✅ **PRE-FILLED**
- Obtained marks: `value="85"` ✅ **PRE-FILLED**
- Back button: Hidden (index = 0)
- Submit button: "Submit Subject 1"

**Critical Point:** The Physics data entered in Step 1 is **LOST** because it was never submitted!


**Global Variables State:**

totalSubjects = 3;
currentSubjectIndex = 0;        // ✅ Back to first subject
subjects = [
  { name: 'Mathematics', total: '100', obtained: '85' },  // ← Now editing again
  { name: '', total: '', obtained: '' },                  // Physics data lost!
  { name: '', total: '', obtained: '' }
];
```

---

## Phase 6: Forward Navigation Again

### Step 1: User clicks "Submit Subject 1" (with Mathematics data)
**Same process as Phase 3:**
- Data validates
- `subjects[0]` gets updated (same data, no change)
- `currentSubjectIndex` becomes 1
- `showSubjectForm(1)` called

### Step 2: Second subject form shows again
**Form displays empty fields because:**
- `subjects[1]` is still `{ name: '', total: '', obtained: '' }`
- Previous Physics data was never saved

---

## Phase 7: Complete Second Subject Properly

### Step 1: User re-enters Physics data
- Name: "Physics"
- Total: "80" 
- Obtained: "70"

### Step 2: User clicks "Submit Subject 2"
**Same submitCurrentSubject() process:**

**Global Variables Update:**

totalSubjects = 3;
currentSubjectIndex = 2;        // ✅ CHANGED: 1 → 2
subjects = [
  { name: 'Mathematics', total: '100', obtained: '85' },
  { name: 'Physics', total: '80', obtained: '70' },       // ✅ NOW SAVED
  { name: '', total: '', obtained: '' }                   // ← Next subject
];
```

---

## Phase 8: Third (Final) Subject

### Step 1: showSubjectForm(2) called
**Line 4:** `const isLast = 2 === (3-1);` = `true` ✅

**Form HTML:**
- Empty fields for third subject
- Back button: Visible
- Submit button: **"Show Result"** (different text/function)

### Step 2: User enters Chemistry data
- Name: "Chemistry"
- Total: "90"
- Obtained: "88"

### Step 3: User clicks "Show Result"
**Function called:** `submitAndShowResult()`

#### Inside submitAndShowResult():
**Line 1-2:** Validation (same process)

**Line 3:** `subjects[currentSubjectIndex] = subjectData;`

subjects = [
  { name: 'Mathematics', total: '100', obtained: '85' },
  { name: 'Physics', total: '80', obtained: '70' },
  { name: 'Chemistry', total: '90', obtained: '88' }      // ✅ FINAL SUBJECT SAVED
];
```

**Line 4:** `localStorage.setItem('subjects', JSON.stringify(subjects));`
- **Browser Storage:** Saves entire subjects array as JSON string

**Line 5:** `window.location.href = 'result.html';`
- **Page Navigation:** Redirects to results page

---

## Final State Summary

**Global Variables Final State:**

totalSubjects = 3;
currentSubjectIndex = 2;        // Last subject index
subjects = [
  { name: 'Mathematics', total: '100', obtained: '85' },
  { name: 'Physics', total: '80', obtained: '70' },
  { name: 'Chemistry', total: '90', obtained: '88' }
];
```

**localStorage Content:**
```json
{
  "subjects": "[{\"name\":\"Mathematics\",\"total\":\"100\",\"obtained\":\"85\"},{\"name\":\"Physics\",\"total\":\"80\",\"obtained\":\"70\"},{\"name\":\"Chemistry\",\"total\":\"90\",\"obtained\":\"88\"}]"
}
```

---

## Key Data Flow Insights

### 1. Data Loss Scenarios
- **Unsaved changes:** If user navigates away before clicking submit, current form data is lost
- **Only submitted data persists** in the subjects array

### 2. Back Button Magic
- **currentSubjectIndex** acts as a pointer
- **subjects array** acts as data storage
- Form pre-fills from `subjects[currentSubjectIndex]`

### 3. Variable Lifecycle
- **totalSubjects:** Set once, never changes
- **currentSubjectIndex:** Changes with navigation (0 ↔ 1 ↔ 2)
- **subjects array:** Gets populated one element at a time as user submits

### 4. Critical Timing
- **DOM data → JavaScript variables:** Only happens on submit
- **JavaScript variables → DOM:** Happens immediately when showing form
- **Memory → localStorage:** Only happens at the very end

This flow ensures data persistence during navigation while maintaining form state and validation integrity throughout the user journey.